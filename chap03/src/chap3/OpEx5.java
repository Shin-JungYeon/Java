package chap3;
/*
 * 이항 연산자 : shift 연산자, 비트 이동 연산자 >> << >>>
 *   <<n : 왼쪽으로 n비트 이동. 가장 오른쪽 비트는 0으로 채움. *2 효과
 *   >>n : 오른쪽으로 n비트 이동. 가장 왼쪽 비트는 부호비트로 채움. /2 효과
 *   >>>n : 오른쪽으로 n비트 이동. 가장 왼쪽 비트는 0으로 채움.
 */
public class OpEx5 {
	public static void main(String[] args) {
		System.out.println("8 << 2 : " + (8 << 2));
		/*
		 * 8   : 00001000
		 * --------------
		 * <<2 : 001000__ : 00100000 : 32
		 */
		System.out.println("8 >> 2 : " + (8 >> 2));
		/*
		 * 8   : 00001000
		 * --------------
		 * >>2 : __000010 : 00000010 : 2
		 */
		System.out.println("8 >>> 2 : " + (8 >>> 2));
		/*
		 * 8    : 00001000
		 * --------------
		 * >>>2 : __000010 : 00000010 : 2
		 */
		System.out.println("-8 << 2 : " + (-8 << 2));
		/*
		 * -8  : 11111000
		 * --------------
		 * <<2 : 111000__ : 11100000 : -32
		 */
		System.out.println("-8 >> 2 : " + (-8 >> 2));
		/*
		 * -8  : 11111000
		 * --------------
		 * >>2 : __111110 : 11111110 : -2
		 */
		System.out.println("-8 >>> 2 : " + (-8 >>> 2));
		/*
		 * -8  : 11111000
		 * --------------
		 * >>>2 : __111110 : 00111110 : ~~~
		 */
		System.out.println("8의 이진수 : " + Integer.toBinaryString(8));
		System.out.println("-8의 이진수 : " + Integer.toBinaryString(-8));
	}
}
